{"ast":null,"code":"//This file when ran opens up a page in the browser where user can remotely control Misty\nimport './index.css'; // import { withWaveHeader, appendBuffer } from './wave-heard';\n//imports the socket.io client\n\nconst io = require(\"socket.io-client\"),\n      //Creates a client that connects ot server at the specified address\nclient = io.connect(\"http://192.168.0.14:5505\");\n\nvar audioContext = new (window.AudioContext || window.webkitAudioContext)();\nvar count = 0;\nvar startTime; //The following buttons change the color of Misty when clicked on in the browser\n\nvar greenButton = document.getElementById(\"greenButton\");\nvar blueButton = document.getElementById(\"blueButton\");\nvar redButton = document.getElementById(\"redButton\"); //left arm motion\n\nvar raiseLeftArm = document.getElementById(\"raiseLeftArm\");\nvar pointLeftArm = document.getElementById(\"pointLeftArm\");\nvar lowerLeftArm = document.getElementById(\"lowerLeftArm\"); //right arm motion\n\nvar raiseRightArm = document.getElementById(\"raiseRightArm\");\nvar pointRightArm = document.getElementById(\"pointRightArm\");\nvar lowerRightArm = document.getElementById(\"lowerRightArm\"); //Change color to green\n\ngreenButton.onclick = function () {\n  client.emit(\"color\", {\n    \"red\": 0,\n    \"green\": 255,\n    \"blue\": 0\n  });\n}; //Change color to blue\n\n\nblueButton.onclick = function () {\n  client.emit(\"color\", {\n    \"red\": 0,\n    \"green\": 0,\n    \"blue\": 255\n  });\n}; //Change color to red\n\n\nredButton.onclick = function () {\n  client.emit(\"color\", {\n    \"red\": 255,\n    \"green\": 0,\n    \"blue\": 0\n  });\n};\n\nraiseLeftArm.onclick = function () {\n  client.emit(\"arm\", {\n    \"Arm\": \"left\",\n    \"Position\": -90,\n    \"Velocity\": 100\n  });\n};\n\npointLeftArm.onclick = function () {\n  client.emit(\"arm\", {\n    \"Arm\": \"left\",\n    \"Position\": 0,\n    \"Velocity\": 100\n  });\n};\n\nlowerLeftArm.onclick = function () {\n  client.emit(\"arm\", {\n    \"Arm\": \"left\",\n    \"Position\": 90,\n    \"Velocity\": 100\n  });\n};\n\nraiseRightArm.onclick = function () {\n  client.emit(\"arm\", {\n    \"Arm\": \"right\",\n    \"Position\": -90,\n    \"Velocity\": 100\n  });\n};\n\npointRightArm.onclick = function () {\n  client.emit(\"arm\", {\n    \"Arm\": \"right\",\n    \"Position\": 0,\n    \"Velocity\": 100\n  });\n};\n\nlowerRightArm.onclick = function () {\n  client.emit(\"arm\", {\n    \"Arm\": \"right\",\n    \"Position\": 90,\n    \"Velocity\": 100\n  });\n};\n\nvar streamVideo = document.getElementById(\"streamVideo\");\n\nstreamVideo.onclick = function () {\n  if (document.getElementById(\"streamVideo\").innerText === \"Start Video Stream\") {\n    document.getElementById(\"streamVideo\").innerText = \"Stop Video Stream\"; // client.emit(\"requestVideo\", {\"Bool\": \"True\"});\n\n    client.emit(\"requestAudio\");\n    client.on(\"getVideo\", function streamvid(data) {\n      // var img = new Image();\n      // img.src = data;\n      var arrayBufferView = new Uint8Array(data);\n      var blob = new Blob([arrayBufferView], {\n        type: \"image/jpeg\"\n      });\n      var urlCreator = window.URL || window.webkitURL;\n      var imageUrl = urlCreator.createObjectURL(blob);\n      document.getElementById(\"videoSpot\").setAttribute(\"src\", imageUrl);\n    });\n    client.on(\"getAudio\", function getAudio(data) {\n      var array = Array.from(data);\n      var arrayBufferView2 = new Uint8Array(array);\n      var blob2 = new Blob([arrayBufferView2], {\n        type: \"audio/wav\"\n      });\n      document.getElementById(\"audioSpot\").setAttribute(\"src\", window.URL.createObjectURL(blob2));\n    });\n  } else {\n    document.getElementById(\"streamVideo\").innerText = \"Start Video Stream\";\n    client.emit(\"requestVideo\", {\n      \"Bool\": \"False\"\n    });\n  }\n}; // https://stackoverflow.com/questions/28440262/web-audio-api-for-live-streaming\n\n\nclass MasterOutput {\n  constructor(computeSamplesCallback) {\n    this.computeSamplesCallback = computeSamplesCallback.bind(this);\n    this.onComputeTimeoutBound = this.onComputeTimeout.bind(this);\n    this.audioContext = new AudioContext();\n    this.sampleRate = this.audioContext.sampleRate;\n    this.channelCount = 2;\n    this.totalBufferDuration = 5;\n    this.computeDuration = 1;\n    this.bufferDelayDuration = 0.1;\n    this.totalSamplesCount = this.totalBufferDuration * this.sampleRate;\n    this.computeDurationMS = this.computeDuration * 1000.0;\n    this.computeSamplesCount = this.computeDuration * this.sampleRate;\n    this.buffersToKeep = Math.ceil((this.totalBufferDuration + 2.0 * this.bufferDelayDuration) / this.computeDuration);\n    this.audioBufferSources = [];\n    this.audioBufferDatas = [];\n    this.expiredAudioBuffers = [];\n    this.computeSamplesTimeout = null;\n  }\n\n  startPlaying() {\n    if (this.audioBufferSources.length > 0) {\n      this.stopPlaying();\n    } //Start computing indefinitely, from the beginning.\n\n\n    let audioContextTimestamp = this.audioContext.getOutputTimestamp();\n    this.audioContextStartOffset = audioContextTimestamp.contextTime;\n    this.lastTimeoutTime = audioContextTimestamp.performanceTime;\n\n    for (this.currentBufferTime = 0.0; this.currentBufferTime < this.totalBufferDuration; this.currentBufferTime += this.computeDuration) {\n      this.bufferNext();\n    }\n\n    this.onComputeTimeoutBound();\n  }\n\n  onComputeTimeout() {\n    this.bufferNext();\n    this.currentBufferTime += this.computeDuration; //Readjust the next timeout to have a consistent interval, regardless of computation time.\n\n    let nextTimeoutDuration = 2.0 * this.computeDurationMS - (performance.now() - this.lastTimeoutTime) - 1;\n    this.lastTimeoutTime = performance.now();\n    this.computeSamplesTimeout = setTimeout(this.onComputeTimeoutBound, nextTimeoutDuration);\n  }\n\n  bufferNext() {\n    this.currentSamplesOffset = this.currentBufferTime * this.sampleRate; //Create an audio buffer, which will contain the audio data.\n    //Create/Reuse an audio buffer, which will contain the audio data.\n\n    if (this.expiredAudioBuffers.length > 0) {\n      //console.log('Reuse');\n      this.audioBuffer = this.expiredAudioBuffers.shift();\n    } else {\n      //console.log('Create');\n      this.audioBuffer = this.audioContext.createBuffer(this.channelCount, this.computeSamplesCount, this.sampleRate);\n    } //Get the audio channels, which are float arrays representing each individual channel for the buffer.\n\n\n    this.channels = [];\n\n    for (let channelIndex = 0; channelIndex < this.channelCount; ++channelIndex) {\n      this.channels.push(this.audioBuffer.getChannelData(channelIndex));\n    } //Compute the samples.\n\n\n    this.computeSamplesCallback(); //Creates a lightweight audio buffer source which can be used to play the audio data. Note: This can only be\n    //started once...\n\n    let audioBufferSource = this.audioContext.createBufferSource(); //Set the audio buffer.\n\n    audioBufferSource.buffer = this.audioBuffer; //Connect it to the output.\n\n    audioBufferSource.connect(this.audioContext.destination); //Start playing when the audio buffer is due.\n\n    audioBufferSource.start(this.audioContextStartOffset + this.currentBufferTime + this.bufferDelayDuration);\n\n    while (this.audioBufferDatas.length >= this.buffersToKeep) {\n      this.expiredAudioBuffers.push(this.audioBufferDatas.shift().buffer);\n    }\n\n    this.audioBufferDatas.push({\n      source: audioBufferSource,\n      buffer: this.audioBuffer\n    });\n  }\n\n  stopPlaying() {\n    if (this.audioBufferDatas.length > 0) {\n      for (let audioBufferData of this.audioBufferDatas) {\n        audioBufferData.source.stop();\n        this.expiredAudioBuffers.push(audioBufferData.buffer);\n      }\n\n      this.audioBufferDatas = [];\n      clearInterval(this.computeSamplesTimeout);\n      this.computeSamplesTimeout = null;\n    }\n  }\n\n}\n\nvar streamAudio = document.getElementById(\"streamAudio\");\n\nstreamAudio.onclick = function () {\n  if (document.getElementById(\"streamAudio\").innerText === \"Start Audio Stream\") {\n    document.getElementById(\"streamAudio\").innerText = \"Stop Audio Stream\";\n    client.emit(\"requestAudio\", {\n      \"Bool\": \"True\"\n    });\n    let masterOutput = new MasterOutput(function () {\n      //Populate the audio buffer with audio data.\n      this.currentSeconds = 0;\n      this.frequency = 220.0;\n      this.sampleIndex = 0;\n    });\n    masterOutput.startPlaying();\n    client.on(\"getAudio\", function streamaud(data) {\n      while (masterOutput.sampleIndex <= masterOutput.computeSamplesCount) {\n        masterOutput.sampleIndex++;\n        masterOutput.currentSeconds = (masterOutput.sampleIndex + masterOutput.currentSamplesOffset) / masterOutput.sampleRate;\n        masterOutput.channels[0][masterOutput.sampleIndex] = new Uint8Array(data); //Copy the right channel from the left channel.\n\n        masterOutput.channels[1][masterOutput.sampleIndex] = masterOutput.channels[0][masterOutput.sampleIndex];\n      }\n    });\n  } else {\n    document.getElementById(\"streamAudio\").innerText = \"Start Audio Stream\";\n    client.emit(\"requestAudio\", {\n      \"Bool\": \"False\"\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/joshc/repos/mistyremotecontrol/JSclient/src/index.js"],"names":["io","require","client","connect","audioContext","window","AudioContext","webkitAudioContext","count","startTime","greenButton","document","getElementById","blueButton","redButton","raiseLeftArm","pointLeftArm","lowerLeftArm","raiseRightArm","pointRightArm","lowerRightArm","onclick","emit","streamVideo","innerText","on","streamvid","data","arrayBufferView","Uint8Array","blob","Blob","type","urlCreator","URL","webkitURL","imageUrl","createObjectURL","setAttribute","getAudio","array","Array","from","arrayBufferView2","blob2","MasterOutput","constructor","computeSamplesCallback","bind","onComputeTimeoutBound","onComputeTimeout","sampleRate","channelCount","totalBufferDuration","computeDuration","bufferDelayDuration","totalSamplesCount","computeDurationMS","computeSamplesCount","buffersToKeep","Math","ceil","audioBufferSources","audioBufferDatas","expiredAudioBuffers","computeSamplesTimeout","startPlaying","length","stopPlaying","audioContextTimestamp","getOutputTimestamp","audioContextStartOffset","contextTime","lastTimeoutTime","performanceTime","currentBufferTime","bufferNext","nextTimeoutDuration","performance","now","setTimeout","currentSamplesOffset","audioBuffer","shift","createBuffer","channels","channelIndex","push","getChannelData","audioBufferSource","createBufferSource","buffer","destination","start","source","audioBufferData","stop","clearInterval","streamAudio","masterOutput","currentSeconds","frequency","sampleIndex","streamaud"],"mappings":"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","sourcesContent":["//This file when ran opens up a page in the browser where user can remotely control Misty\r\nimport './index.css'\r\n// import { withWaveHeader, appendBuffer } from './wave-heard';\r\n//imports the socket.io client\r\nconst io = require(\"socket.io-client\"),\r\n//Creates a client that connects ot server at the specified address\r\nclient = io.connect(\"http://192.168.0.14:5505\");\r\n\r\nvar audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\nvar count = 0;\r\nvar startTime;\r\n\r\n//The following buttons change the color of Misty when clicked on in the browser\r\n\r\nvar greenButton = document.getElementById(\"greenButton\");\r\nvar blueButton = document.getElementById(\"blueButton\");\r\nvar redButton = document.getElementById(\"redButton\");\r\n//left arm motion\r\nvar raiseLeftArm = document.getElementById(\"raiseLeftArm\");\r\nvar pointLeftArm = document.getElementById(\"pointLeftArm\");\r\nvar lowerLeftArm = document.getElementById(\"lowerLeftArm\");\r\n//right arm motion\r\nvar raiseRightArm = document.getElementById(\"raiseRightArm\");\r\nvar pointRightArm = document.getElementById(\"pointRightArm\");\r\nvar lowerRightArm = document.getElementById(\"lowerRightArm\");\r\n//Change color to green\r\ngreenButton.onclick = function(){\r\n  client.emit(\"color\",{\"red\": 0,\"green\": 255,\"blue\": 0});\r\n}\r\n//Change color to blue\r\nblueButton.onclick = function(){\r\n  client.emit(\"color\",{\"red\": 0,\"green\": 0,\"blue\": 255});\r\n}\r\n//Change color to red\r\nredButton.onclick = function(){\r\n  client.emit(\"color\",{\"red\": 255,\"green\": 0,\"blue\": 0});\r\n}\r\n\r\nraiseLeftArm.onclick = function(){\r\n  client.emit(\"arm\",{\"Arm\": \"left\" , \"Position\": -90, \"Velocity\": 100});\r\n}\r\npointLeftArm.onclick =function(){\r\n  client.emit(\"arm\", {\"Arm\":\"left\", \"Position\": 0, \"Velocity\": 100});\r\n}\r\nlowerLeftArm.onclick =function(){\r\n  client.emit(\"arm\", {\"Arm\":\"left\", \"Position\": 90, \"Velocity\": 100});\r\n}\r\n\r\nraiseRightArm.onclick = function(){\r\n  client.emit(\"arm\",{\"Arm\": \"right\" , \"Position\": -90, \"Velocity\": 100});\r\n}\r\npointRightArm.onclick =function(){\r\n  client.emit(\"arm\", {\"Arm\":\"right\", \"Position\": 0, \"Velocity\": 100});\r\n}\r\nlowerRightArm.onclick =function(){\r\n  client.emit(\"arm\", {\"Arm\":\"right\", \"Position\": 90, \"Velocity\": 100});\r\n}\r\n\r\n\r\nvar streamVideo = document.getElementById(\"streamVideo\");\r\n\r\n\r\nstreamVideo.onclick = function(){\r\n  if(document.getElementById(\"streamVideo\").innerText === \"Start Video Stream\"){\r\n    document.getElementById(\"streamVideo\").innerText = \"Stop Video Stream\";\r\n    // client.emit(\"requestVideo\", {\"Bool\": \"True\"});\r\n    client.emit(\"requestAudio\");\r\n  \r\n    client.on(\"getVideo\", function streamvid(data){   \r\n      // var img = new Image();\r\n      // img.src = data;\r\n\r\n      var arrayBufferView = new Uint8Array( data );\r\n      var blob = new Blob( [ arrayBufferView ], { type: \"image/jpeg\" } );\r\n      var urlCreator = window.URL || window.webkitURL;\r\n      var imageUrl = urlCreator.createObjectURL( blob );\r\n    \r\n\r\n      document.getElementById(\"videoSpot\").setAttribute(\"src\", imageUrl);\r\n     \r\n    })\r\n\r\n    client.on(\"getAudio\", function getAudio(data){\r\n      var array = Array.from(data);\r\n      var arrayBufferView2 = new Uint8Array(array);\r\n      var blob2 = new Blob( [arrayBufferView2], {type: \"audio/wav\" })\r\n      document.getElementById(\"audioSpot\").setAttribute(\"src\",window.URL.createObjectURL(blob2));\r\n    })\r\n  }\r\n  else{\r\n    document.getElementById(\"streamVideo\").innerText = \"Start Video Stream\"\r\n    client.emit(\"requestVideo\", {\"Bool\": \"False\"})\r\n  }\r\n}\r\n\r\n// https://stackoverflow.com/questions/28440262/web-audio-api-for-live-streaming\r\nclass MasterOutput {\r\n  constructor(computeSamplesCallback) {\r\n    this.computeSamplesCallback = computeSamplesCallback.bind(this);\r\n    this.onComputeTimeoutBound = this.onComputeTimeout.bind(this);\r\n\r\n    this.audioContext = new AudioContext();\r\n    this.sampleRate = this.audioContext.sampleRate;\r\n    this.channelCount = 2;\r\n\r\n    this.totalBufferDuration = 5;\r\n    this.computeDuration = 1;\r\n    this.bufferDelayDuration = 0.1;\r\n\r\n    this.totalSamplesCount = this.totalBufferDuration * this.sampleRate;\r\n    this.computeDurationMS = this.computeDuration * 1000.0;\r\n    this.computeSamplesCount = this.computeDuration * this.sampleRate;\r\n    this.buffersToKeep = Math.ceil((this.totalBufferDuration + 2.0 * this.bufferDelayDuration) /\r\n      this.computeDuration);\r\n\r\n    this.audioBufferSources = [];\r\n    this.audioBufferDatas = [];\r\n    this.expiredAudioBuffers = [];\r\n    this.computeSamplesTimeout = null;\r\n  }\r\n\r\n  startPlaying() {\r\n    if (this.audioBufferSources.length > 0) {\r\n      this.stopPlaying();\r\n    }\r\n\r\n    //Start computing indefinitely, from the beginning.\r\n    let audioContextTimestamp = this.audioContext.getOutputTimestamp();\r\n    this.audioContextStartOffset = audioContextTimestamp.contextTime;\r\n    this.lastTimeoutTime = audioContextTimestamp.performanceTime;\r\n    for (this.currentBufferTime = 0.0; this.currentBufferTime < this.totalBufferDuration;\r\n      this.currentBufferTime += this.computeDuration) {\r\n      this.bufferNext();\r\n    }\r\n    this.onComputeTimeoutBound();\r\n  }\r\n\r\n  onComputeTimeout() {\r\n    this.bufferNext();\r\n    this.currentBufferTime += this.computeDuration;\r\n\r\n    //Readjust the next timeout to have a consistent interval, regardless of computation time.\r\n    let nextTimeoutDuration = 2.0 * this.computeDurationMS - (performance.now() - this.lastTimeoutTime) - 1;\r\n    this.lastTimeoutTime = performance.now();\r\n    this.computeSamplesTimeout = setTimeout(this.onComputeTimeoutBound, nextTimeoutDuration);\r\n  }\r\n\r\n  bufferNext() {\r\n    this.currentSamplesOffset = this.currentBufferTime * this.sampleRate;\r\n\r\n    //Create an audio buffer, which will contain the audio data.\r\n        //Create/Reuse an audio buffer, which will contain the audio data.\r\n      if (this.expiredAudioBuffers.length > 0) {\r\n          //console.log('Reuse');\r\n          this.audioBuffer = this.expiredAudioBuffers.shift();\r\n      } else {\r\n          //console.log('Create');\r\n          this.audioBuffer = this.audioContext.createBuffer(this.channelCount, this.computeSamplesCount,\r\n              this.sampleRate);\r\n      }\r\n\r\n    //Get the audio channels, which are float arrays representing each individual channel for the buffer.\r\n    this.channels = [];\r\n    for (let channelIndex = 0; channelIndex < this.channelCount; ++channelIndex) {\r\n      this.channels.push(this.audioBuffer.getChannelData(channelIndex));\r\n    }\r\n\r\n    //Compute the samples.\r\n    this.computeSamplesCallback();\r\n\r\n    //Creates a lightweight audio buffer source which can be used to play the audio data. Note: This can only be\r\n    //started once...\r\n    let audioBufferSource = this.audioContext.createBufferSource();\r\n    //Set the audio buffer.\r\n    audioBufferSource.buffer = this.audioBuffer;\r\n    //Connect it to the output.\r\n    audioBufferSource.connect(this.audioContext.destination);\r\n    //Start playing when the audio buffer is due.\r\n    audioBufferSource.start(this.audioContextStartOffset + this.currentBufferTime + this.bufferDelayDuration);\r\n    while (this.audioBufferDatas.length >= this.buffersToKeep) {\r\n      this.expiredAudioBuffers.push(this.audioBufferDatas.shift().buffer);\r\n    }\r\n    this.audioBufferDatas.push({\r\n        source: audioBufferSource,\r\n        buffer: this.audioBuffer\r\n    });\r\n  }\r\n\r\n  stopPlaying() {\r\n    if (this.audioBufferDatas.length > 0) {\r\n      for (let audioBufferData of this.audioBufferDatas) {\r\n          audioBufferData.source.stop();\r\n          this.expiredAudioBuffers.push(audioBufferData.buffer);\r\n      }\r\n      this.audioBufferDatas = [];\r\n      clearInterval(this.computeSamplesTimeout);\r\n      this.computeSamplesTimeout = null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n  var streamAudio = document.getElementById(\"streamAudio\");\r\n\r\n  streamAudio.onclick = function(){\r\n    if(document.getElementById(\"streamAudio\").innerText === \"Start Audio Stream\"){\r\n      document.getElementById(\"streamAudio\").innerText = \"Stop Audio Stream\";\r\n      client.emit(\"requestAudio\", {\"Bool\": \"True\"});\r\n\r\n        let masterOutput = new MasterOutput(function() {\r\n          //Populate the audio buffer with audio data.\r\n          this.currentSeconds = 0;\r\n          this.frequency = 220.0;\r\n          this.sampleIndex = 0\r\n\r\n        });\r\n\r\n        \r\n        masterOutput.startPlaying();\r\n\r\n        client.on(\"getAudio\", function streamaud(data) {   \r\n\r\n          while ( masterOutput.sampleIndex <= masterOutput.computeSamplesCount) {\r\n\r\n            masterOutput.sampleIndex++;\r\n            masterOutput.currentSeconds = (masterOutput.sampleIndex + masterOutput.currentSamplesOffset) / masterOutput.sampleRate;\r\n\r\n            masterOutput.channels[0][masterOutput.sampleIndex] =  new Uint8Array( data );\r\n  \r\n            //Copy the right channel from the left channel.\r\n            masterOutput.channels[1][masterOutput.sampleIndex] = masterOutput.channels[0][masterOutput.sampleIndex];\r\n\r\n   \r\n           }\r\n        });\r\n      \r\n    \r\n      }\r\n    else{\r\n      document.getElementById(\"streamAudio\").innerText = \"Start Audio Stream\"\r\n      client.emit(\"requestAudio\", {\"Bool\": \"False\"})\r\n    }\r\n\r\n\r\n}\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"]},"metadata":{},"sourceType":"module"}